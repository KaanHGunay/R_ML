print("Hello World")
setwd("C:/Users/Kaan/Desktop/ML_R/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[4:14]
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(test_set)
View(training_set)
install.packages('H2O')
install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(6, 6), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata = test_set[-11])
prob_pred = h2o.predict(as.h2o(classifier), newdata = test_set[-11])
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
View(y_pred)
View(y_pred)
prob_pred[0]
y_pred = as.vector(y_pred)
as.vector(prob_pred)
cm = table(test_set[, 11], y_pred)
cm
(1529+188)/(1529+188+64+219)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(12, 12), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1531+201)/(1531+201+62+206)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(12, 12, 12), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1535+196)/(1535+196+58+211)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(12, 12, 12, 12), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1541+191)/(1541+191+52+216)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(20, 20, 20, 20), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1515+201)/(1515+201+78+206)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(100, 100, 100, 100), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 100, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1462+217)/(190+131+1462+217)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(6, 6), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 1000, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
CM
cm
(1535+207)/(1535+207+58+200)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(6, 6), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 3000, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1548+179)/(1548+179+45+228)
classifier = h2o.deeplearning(y = 'Exited', # Sonuç vektörünün adı
training_frame = as.h2o(training_set), # veri seti h2o objesine çevrilerek
activation = 'Rectifier', # Rextifier activation algoritmasını kullan
hidden = c(12, 12, 12), # Kaç layer olacaksa nöron sayısı ile verilir
epochs = 3000, # kaç jenerasyonun bulunacağı
train_samples_per_iteration = -2) # kaç örnekte ağırlıkların güncelleneceği / otomatik belirle -2
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
(1510+207)/(150+207+83+200)
(1510+207)/(1510+207+83+200)
h2o.shutdown() # h2o serverını kapatma
