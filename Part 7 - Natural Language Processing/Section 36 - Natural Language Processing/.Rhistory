print("Hello World")
setwd("C:/Users/Kaan/Desktop/ML_R/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
dataset = read.delim('Restaurant_Review.tsv')
dataset = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
View(dataset)
install.packages('tm')
corpus = VCorpus(VectorSource(dataset$Review))
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
as.character(corpus[1])
corpus = tm_map(corpus, removeNumbers)
View(corpus)
as.character(corpus[[841]])
corpus = tm_map(corpus, removePunctuation) # Noktalamaları silme
as.character(corpus[[1]])
install.packages('SnowballC')
library(SnowballC)
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
corpus = tm_map(corpus, stemDocument) # Fiillerin hepsini 1. hale getirir
as.character(corpus[[1]])
corpus = tm_map(corpus, stripWhitespace) # Fazladan bulunan boşlukları siler
as.character(corpus[[8411]])
as.character(corpus[[841]])
as.character(corpus[[1]])
install.packages(c("digest", "stringi"))
l
dtm = DocumentTermMatrix(corpus)
View(dtm)
View(dtm)
dtm['Terms']
dtm$dimnames$Terms
dtm
dtm = removeSparseTerms(dtm, 0.99) # sparse matrixini %99 09 olacak şekilde düzenleme
dtm = DocumentTermMatrix(corpus) # Sparse matrix oluişturma
dtm = removeSparseTerms(dtm, 0.999)
dtm
dtm$dimnames$Terms
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset$Liked = dataset_original$Liked
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Decision Tree Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692], # son sonuç kolonu hariç
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
(82+77)/(82+77+18+23)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
library(tm)
library(SnowballC) # Gereksiz kelimeler için
corpus = VCorpus(VectorSource(dataset$Review)) # Tüm cümleleri alma
corpus = tm_map(corpus, content_transformer(tolower)) # Tüm harfleri küçüğe çevirme
corpus = tm_map(corpus, removeNumbers) # Sayıları silme
corpus = tm_map(corpus, removePunctuation) # Noktalamaları silme
corpus = tm_map(corpus, removeWords, stopwords()) # Gereksiz kelimeleri silme and, or, a, an gibi
corpus = tm_map(corpus, stemDocument) # Fiillerin hepsini 1. hale getirir
corpus = tm_map(corpus, stripWhitespace) # Fazladan bulunan boşlukları siler
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus) # Sparse matrix oluişturma
dtm = removeSparseTerms(dtm, 0.999) # sparse matrixini %99.9 0 olacak şekilde düzenleme
dataset = as.data.frame(as.matrix(dtm)) # Data Frame çeviriyoruz
dataset$Liked = dataset_original$Liked # datasete sonuçlarıda ekliyoruz
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Decision Tree Classification to the Training set
#library(randomForest)
#classifier = randomForest(x = training_set[-692], # son sonuç kolonu hariç
#                          y = training_set$Liked,
#                          ntree = 10)
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
library(tm)
library(SnowballC) # Gereksiz kelimeler için
corpus = VCorpus(VectorSource(dataset_original$Review)) # Tüm cümleleri alma
corpus = tm_map(corpus, content_transformer(tolower)) # Tüm harfleri küçüğe çevirme
corpus = tm_map(corpus, removeNumbers) # Sayıları silme
corpus = tm_map(corpus, removePunctuation) # Noktalamaları silme
corpus = tm_map(corpus, removeWords, stopwords()) # Gereksiz kelimeleri silme and, or, a, an gibi
corpus = tm_map(corpus, stemDocument) # Fiillerin hepsini 1. hale getirir
corpus = tm_map(corpus, stripWhitespace) # Fazladan bulunan boşlukları siler
dtm = DocumentTermMatrix(corpus) # Sparse matrix oluişturma
dtm = removeSparseTerms(dtm, 0.999) # sparse matrixini %99.9 0 olacak şekilde düzenleme
dataset = as.data.frame(as.matrix(dtm)) # Data Frame çeviriyoruz
dataset$Liked = dataset_original$Liked
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Purchased)
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Natural Language Processing
# Importing Dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
library(tm)
library(SnowballC) # Gereksiz kelimeler için
corpus = VCorpus(VectorSource(dataset_original$Review)) # Tüm cümleleri alma
corpus = tm_map(corpus, content_transformer(tolower)) # Tüm harfleri küçüğe çevirme
corpus = tm_map(corpus, removeNumbers) # Sayıları silme
corpus = tm_map(corpus, removePunctuation) # Noktalamaları silme
corpus = tm_map(corpus, removeWords, stopwords()) # Gereksiz kelimeleri silme and, or, a, an gibi
corpus = tm_map(corpus, stemDocument) # Fiillerin hepsini 1. hale getirir
corpus = tm_map(corpus, stripWhitespace) # Fazladan bulunan boşlukları siler
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus) # Sparse matrix oluişturma
dtm = removeSparseTerms(dtm, 0.999) # sparse matrixini %99.9 0 olacak şekilde düzenleme
dataset = as.data.frame(as.matrix(dtm)) # Data Frame çeviriyoruz
dataset$Liked = dataset_original$Liked # datasete sonuçlarıda ekliyoruz
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Decision Tree Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692], # son sonuç kolonu hariç
y = training_set$Liked,
ntree = 30)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
(79+77)/(79+77+21+23)
# Natural Language Processing
# Importing Dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
library(tm)
library(SnowballC) # Gereksiz kelimeler için
corpus = VCorpus(VectorSource(dataset_original$Review)) # Tüm cümleleri alma
corpus = tm_map(corpus, content_transformer(tolower)) # Tüm harfleri küçüğe çevirme
corpus = tm_map(corpus, removeNumbers) # Sayıları silme
corpus = tm_map(corpus, removePunctuation) # Noktalamaları silme
corpus = tm_map(corpus, removeWords, stopwords()) # Gereksiz kelimeleri silme and, or, a, an gibi
corpus = tm_map(corpus, stemDocument) # Fiillerin hepsini 1. hale getirir
corpus = tm_map(corpus, stripWhitespace) # Fazladan bulunan boşlukları siler
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus) # Sparse matrix oluişturma
dtm = removeSparseTerms(dtm, 0.999) # sparse matrixini %99.9 0 olacak şekilde düzenleme
dataset = as.data.frame(as.matrix(dtm)) # Data Frame çeviriyoruz
dataset$Liked = dataset_original$Liked # datasete sonuçlarıda ekliyoruz
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Decision Tree Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692], # son sonuç kolonu hariç
y = training_set$Liked,
ntree = 300)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
(77+76)/(77+76+23+24)
